sudo: required
dist: bionic

services:
  - docker

notifications:
  email:
    on_success: change
    on_failure: change

################################################################################

stage_base: &stage_base
  before_install:
    - if [[ -a .git/shallow ]]; then git fetch --unshallow; fi
    - export WORKRAVE_FULL_TAG=`git describe --tags --abbrev=10`
    - export WORKRAVE_TAG=`git describe --abbrev=0`
    - export WORKRAVE_COMMIT_COUNT=`git rev-list ${WORKRAVE_TAG}..HEAD --count`
    - export WORKRAVE_COMMIT_HASH=`git rev-parse HEAD`
    - export WORKRAVE_BUILD_DATE=`date +"%Y%m%d"`
    - export WORKRAVE_BUILD_DATETIME=`date --iso-8601=seconds`
    - export WORKRAVE_BUILD_ID="$WORKRAVE_BUILD_DATE-$WORKRAVE_FULL_TAG"
    - export WORKRAVE_UPLOAD_DIR="snapshots/v1.10/$WORKRAVE_BUILD_ID"
    - |
        if [ ${TRAVIS_OS_NAME} = "osx" ]; then
          # compilation with system wide gettext fails at the link stage with missing symbols...
          brew install gettext qt5 python3
          brew link gettext --force
          brew linkapps qt5
          brew outdated cmake || brew upgrade cmake

          pip3 install --user Jinja2==2.8 # required for dbus support, system (distro) wide include paths are ignored

        elif [ ${TRAVIS_OS_NAME} = "linux" ]; then
          pushd /tmp
          curl -OL https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2
          tar xvfj linux-amd64-github-release.tar.bz2
          mkdir -p ~/bin/
          mv bin/linux/amd64/github-release ~/bin/
          chmod +x ~/bin/github-release
          popd
          sudo apt-get -y install python3 python3-pip python3-setuptools
          python3 -V
          pip3 -V
        fi
        
        pip3 install wheel
        pip3 install awscli
        which awscli
        # Configure MinIO endpoint
        aws configure set aws_access_key_id travis
        aws configure set aws_secret_access_key $SNAPSHOTS_SECRET_ACCESS_KEY
        aws configure set default.region us-east-1
        aws configure set default.s3.signature_version s3v4
        aws configure set s3.endpoint_url https://snapshots.workrave.org/


stage_build_docker: &stage_build_docker
  <<: *stage_base
  os: linux
  dist: bionic
  language: cpp
  script: |
    if [[ $DOCKER_IMAGE ]]; then
      IFS=$'\n'
      docker run --rm \
          -v "$TRAVIS_BUILD_DIR:/workspace/source" \
          `printenv | grep -E '^(CONF_ENABLE|CONF_DISABLE||CONF_FLAGS|CONF_GTK_VER|CONFIGURATION|DOCKER_IMAGE|DISTCHECK|TRAVIS_TAG|TRAVIS_BUILD_DIR|TRAVIS_BUILD_NUMBER|TRAVIS_JOB_NUMBER|TRAVIS_REPO_SLUG|TRAVIS_OS_NAME|TRAVIS_BRANCH|WORKRAVE_.*)=' | sed  -e 's/^/-e/g' ` \
          rcaelers/workrave-build:${DOCKER_IMAGE} \
          sh -c "/workspace/source/build/travis/build.sh"
    else
       build/travis/build.sh
    fi

stage_build_osx: &stage_build_osx
  <<: *stage_base
  os: osx
  osx_image: xcode11
  language: cpp
  script:
    - build/travis/build.sh

stage_deploy: &stage_deploy
  <<: *stage_base
  deploy:
    - provider: script
      skip_cleanup: true
      on:
        repo: avikhorev/workrave
        branch: branch_v1_10
        tags: true
        condition: $TRAVIS_TAG =~ ^v1_.*$
      script: build/travis/deploy-upload.sh

    - provider: script
      skip_cleanup: true
      on:
        repo: avikhorev/workrave
        branch: branch_v1_10
      script: 
        - aws s3 --endpoint-url https://snapshots.workrave.org/ cp --recursive _deploy s3://$WORKRAVE_UPLOAD_DIR

stage_deploy_ppa: &stage_deploy_ppa
  <<: *stage_base
  os: linux
  dist: bionic
  language: cpp
  script: |
    if [[ $DOCKER_IMAGE ]]; then
      docker run --rm \
          -v "$TRAVIS_BUILD_DIR:/workspace/source" \
          -e TRAVIS_TAG=${TRAVIS_TAG} \
          rcaelers/workrave-build:${DOCKER_IMAGE} \
          sh -c "/workspace/source/build/travis/ppa.sh"
    else
       build/travis/ppa.sh
    fi

jobs:
  include:
    - stage: prepare
      language: cpp
      script: |
        VERSION=`echo $TRAVIS_TAG | sed -e 's/_/./g'` \
        github-release release \
          --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
          --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
          --tag "$TRAVIS_TAG" \
          --name "Workrave $VERSION" \
          --description "New release" \
          --draft
      <<: *stage_base

    ###########################################################################
    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-xenial"
      <<: *stage_build_docker

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-bionic"
      <<: *stage_build_docker

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-cosmic"
      <<: *stage_build_docker

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-disco"
      <<: *stage_build_docker
      <<: *stage_deploy

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-eoan"
      <<: *stage_build_docker

    - stage: build
      env: >
        COMPILER="gcc"
        DOCKER_IMAGE="ubuntu-disco"
        CONF_GTK_VER="2"
        CONF_ENABLE="gsettings,,exercises,xml,gconf,distribution,experimental"
        CONF_DISABLE="pulse,xfce,gnome3,gstreamer,dbus,mate,indicator"
      <<: *stage_build_docker

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,pulse,dbus,experimental,gstreamer,exercises,xml"
        CONF_DISABLE="gsettings,gconf,indicator,xfce,mate,debug,distribution,tests,tracing"
        DOCKER_IMAGE="ubuntu-disco"
      <<: *stage_build_docker

    - stage: build
      env: >
        COMPILER="gcc"
        CONFIGURATION="Release"
        DOCKER_IMAGE="mingw-gtk2"
      <<: *stage_build_docker
      <<: *stage_deploy

    - stage: build
      env: >
        COMPILER="gcc"
        CONFIGURATION="Debug"
        DOCKER_IMAGE="mingw-gtk2"
      <<: *stage_build_docker
      <<: *stage_deploy

    - stage: catalog
      language: node_js
      node_js:
        - 12.7.0
      script:
        - cd $TRAVIS_BUILD_DIR/build/travis/catalog
        - npm i
        - node --experimental-modules main.js 
        - curl -X POST -d {} https://api.netlify.com/build_hooks/$NETLIFY_TRIGGER
      <<: *stage_base

    - stage: release
      script:
        - |
          VERSION=`echo $TRAVIS_TAG | sed -e 's/_/./g'` \
          github-release edit \
          --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
          --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
          --tag "$TRAVIS_TAG" \
          --name "Workrave $VERSION" \
          --description "New release"
      <<: *stage_base

    - stage: ppa
      env: >
        DOCKER_IMAGE="ubuntu-bionic"
      before_install:
        - mkdir -p _dist/secrets
        - chmod 0700 _dist/secrets
        - openssl aes-256-cbc -K $encrypted_cc78bd3121e0_key -iv $encrypted_cc78bd3121e0_iv -in build/travis/secrets.tar.enc -out _dist/secrets/secrets.tar -d
        - tar xf _dist/secrets/secrets.tar -C _dist/
        - rm -f _dist/secrets/secrets.tar
        - echo $GPG_PASSPHRASE > _dist/secrets/priv-key
      <<: *stage_deploy_ppa

# TODO; fails before github-release is not installed
after_failure:
  - |
    github-release delete \
    --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
    --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
    --tag "$TRAVIS_TAG"

stages:
    - name: prepare
      if: tag IS present AND tag =~ ^v1_.*$ AND type = push
    - name: build
      if: (tag IS NOT present) OR (tag != ppa)
    - name: catalog
      if: (tag IS NOT present) OR (tag != ppa)
    - name: release
      if: tag IS present AND tag =~ ^v1_.*$ AND type = push
    - name: ppa
      if: tag IS present AND (tag =~ ^v1_.*$ OR tag = ppa) AND type = push
